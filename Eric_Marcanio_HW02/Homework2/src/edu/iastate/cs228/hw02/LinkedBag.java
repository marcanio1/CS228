package edu.iastate.cs228.hw02;/**   A class of bags whose entries are stored in a chain of linked nodes.	The bag is never full.   @author Eric Marcanio   @version 4.1*/public final class LinkedBag<T> implements BagInterface<T>{	private Node firstNode;       // Reference to first node	private int numberOfEntries;	public LinkedBag()	{		firstNode = null;      numberOfEntries = 0;	} // end default constructor	/** Sees whether this bag is empty.	    @return  True if this bag is empty, or false if not. */	public boolean isEmpty() 	{		return numberOfEntries == 0;	} // end isEmpty	/** Gets the number of entries currently in this bag.	    @return  The integer number of entries currently in this bag. */	public int getCurrentSize() 	{		return numberOfEntries;	} // end getCurrentSize	/** Adds a new entry to this bag.	    @param newEntry  The object to be added as a new entry	    @return  True if the addition is successful, or false if not. */	public boolean add(T newEntry)  	      // OutOfMemoryError possible	{      // Add to beginning of chain:		Node newNode = new Node(newEntry);		newNode.next = firstNode; // Make new node reference rest of chain                                // (firstNode is null if chain is empty)              firstNode = newNode;      // New node is at beginning of chain		numberOfEntries++;      		return true;	} // end add	/** Retrieves all entries that are in this bag.	    @return  A newly allocated array of all the entries in this bag. */	public Object[] toArray()	{      // The cast is safe because the new array contains null entries      @SuppressWarnings("unchecked")      T[] result = (T[])new Object[numberOfEntries]; // Unchecked cast      int index = 0;      Node currentNode = firstNode;      while ((index < numberOfEntries) && (currentNode != null))      {         result[index] = currentNode.data;         index++;         currentNode = currentNode.next;      } // end while      			return result;	} // end toArray	/** Counts the number of times a given entry appears in this bag.		 @param anEntry  The entry to be counted.		 @return  The number of times anEntry appears in this bag. */	public int getFrequencyOf(T anEntry) 	{		int frequency = 0;      int counter = 0;      Node currentNode = firstNode;      while ((counter < numberOfEntries) && (currentNode != null))      {         if (anEntry.equals(currentNode.data))         {            frequency++;         } // end if                  counter++;         currentNode = currentNode.next;      } // end while		return frequency;	} // end getFrequencyOf	/** Tests whether this bag contains a given entry.		 @param anEntry  The entry to locate.		 @return  True if the bag contains anEntry, or false otherwise. */	public boolean contains(T anEntry)	{      boolean found = false;      Node currentNode = firstNode;            while (!found && (currentNode != null))      {         if (anEntry.equals(currentNode.data))            found = true;         else            currentNode = currentNode.next;      } // end while	            return found;   } // end contains    	// Locates a given entry within this bag.	// Returns a reference to the node containing the entry, if located,	// or null otherwise.	private Node getReferenceTo(T anEntry)	{		boolean found = false;		Node currentNode = firstNode;				while (!found && (currentNode != null))		{			if (anEntry.equals(currentNode.data))				found = true;			else				currentNode = currentNode.next;		} // end while     		return currentNode;	} // end getReferenceTo   /** Removes all entries from this bag. */	public void clear() 	{		while (!isEmpty())          remove();	} // end clear		/** Removes one unspecified entry from this bag, if possible.       @return  Either the removed entry, if the removal                was successful, or null. */	public T remove()	{		T result = null;      if (firstNode != null)      {         result = firstNode.data;          firstNode = firstNode.next; // Remove first node from chain         numberOfEntries--;      } // end if		return result;	} // end remove		/** Removes one occurrence of a given entry from this bag, if possible.       @param anEntry  The entry to be removed.       @return  True if the removal was successful, or false otherwise. */   public boolean remove(T anEntry) 	{		boolean result = false;      Node nodeN = getReferenceTo(anEntry);            if (nodeN != null)      {         nodeN.data = firstNode.data; // Replace located entry with entry in first node                  firstNode = firstNode.next;  // Remove first node         numberOfEntries--;                  result = true;      } // end if         		return result;	} // end remove	private class Node 	{	  private T    data; // Entry in bag	  private Node next; // Link to next node		private Node(T dataPortion)		{			this(dataPortion, null);			} // end constructor				private Node(T dataPortion, Node nextNode)		{			data = dataPortion;			next = nextNode;			} // end constructor	} // end Node	@Override	public BagInterface<T> union(BagInterface<T> anotherBag) {		BagInterface<T> both = new LinkedBag<T>();		LinkedBag<T> another = (LinkedBag<T>) anotherBag;		Node first = firstNode;		Node seccond = another.firstNode;				while(first!= null) {			both.add(first.data);			first = first.next;			}		while(seccond!= null) {			both.add(seccond.data);			seccond = seccond.next;		}		return both;	}	@Override	public BagInterface<T> intersection(BagInterface<T> anotherBag) {		BagInterface<T> returnA = new LinkedBag<T>();		Node first = firstNode;				while(first!= null) {			if(anotherBag.contains(first.data)&& !returnA.contains(first.data)) {				int amnt = getFrequencyOf(first.data);				int amnt2 = anotherBag.getFrequencyOf(first.data);   //making sure if there is multiple they only get put in the list once				for(int i=0; i< Math.min(amnt, amnt2); i++) {					returnA.add(first.data);				}		}			first = first.next;	}		return returnA;	}	@Override	public BagInterface<T> difference(BagInterface<T> anotherBag) {		BagInterface<T> returnA = new LinkedBag<T>();		BagInterface<T> another = new LinkedBag<T>();		LinkedBag<T> anotherClone = (LinkedBag<T>) anotherBag;				Node first = firstNode;		Node seccond = anotherClone.firstNode;				while(first != null) {			returnA.add(first.data);			first = first.next;		}		first = firstNode;		while(seccond != null) {			another.add(seccond.data);			seccond = seccond.next;		}		while(first != null) {			if(another.contains(first.data)) {			returnA.remove(first.data);			another.remove(first.data);			}			first = first.next;		}				return returnA;	}	@Override	public T replace(T replacement) {		Node spot = firstNode;				if( spot == null)			return null;				T stuff = spot.data;				spot.data = replacement;				return stuff;	}	@Override	public void removeEvery(T anEntry) {		Node place= firstNode;				while(place!= null) {			if(place.data.equals(anEntry)) {				place.data = remove();				place= place.next;			}			else				place= place.next;		}			}	@Override	public boolean equals(Object o) {		if( o == null) 			return false;				Node place = firstNode;		LinkedBag<T> sameO = (LinkedBag<T>)(o);						while(place!= null) {			T stuff = place.data;			if(sameO.contains(stuff)){     //If they have same thing it will check if it occurs for the same amount of time				if(sameO.getFrequencyOf(stuff)!= getFrequencyOf(stuff))					return false;			}			else				return false;			place = place.next;		}		return true;	}} // end LinkedBag